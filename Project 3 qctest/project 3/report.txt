Coco Li 
UID: 905917242


During this project, I had the most challenging time with the first function because of all the requirements that came with having a valid QC string. I realized that the best way to complete the first function was by creating different functions for the smaller parts and then calling it in the actual function name. Furthermore, another challenge I had was making sure the if-else statements were in the right order (making sure it doesn’t return false before checking another part of the QC string). 


For the first function, I created three separate functions to test if the QCtest was valid. My first function was checkLetters, which ensures that the letters in the test are only Q, p, and d. The second function was numbersBeforeLetters which only grabs digits from the given string.  My last function that would be called in isValidQC was oneQCTest.  For the oneQCTest function, it was used to ensure that only one test is accurate. It checked for leading zeros behind p and d, no special characters and white spaces, ensuring that the number of defects and passes are the same amount as test performed, and that there were no extra passes and defects. Once I had oneQCTest, I called it in my isValidQC. In my isValidQC I declared a variable oneBatch that will get one test from the string. To get oneBatch, I used the substr and find functions.  I would then call oneQCTest on OneBatch, and if it was false I would return false. If it was not false, I used the erase function to remove the first batch from the string and set oneBatch back to an empty string.  The for loop use would allow this process to keep repeating until the int index i was no longer less than the length of the string.


For passQC, defectQC, and totalQC, they all follow the same structure, but the variables are slightly different for it’s functions purpose. I created separate functions for one test. In the functions for only one test (oneDefectQC, onePassQC, oneTotalQC), I declared a string variable (pNumbers, dNumers, and testValue) and declared and initialized an int variable (amountOfPass, amountOfDefect, and amountOfTest). I then checked to ensure the string being passed was a validQC test (called isValidQC to do this) before using the variables. If isValidQC returned true, I got the substring of the numbers after the letters I was looking for and set it equal to the string variable. With the string variable, I used stoi to convert the string variable into an integer and added that to the declared int variable mentioned earlier. I would then return the int variable for the number of passes, defects, and total.  Once I had it working for one test, I created the function that can handle multiple batches (passQC, defectQC, and totalQC).  For these functions, I first made sure the string was valid. I then used a for loop (index starts at i which was set to  0, index has to be less than the length of the string, and index increases once everytime the loop ran). In this for loop, I used substr to get one test in the string and set it equal to the variable declared earlier in the function called oneTest.  I then called oneDefectQC, onePassQC, or oneTotalQC on this oneTest variable in order to get their numbers and added the numbers to the int variable (totalAmountD, totalAmountTest, and totalAmountofP). I would then return these int variables when the loop was done performing. 


For the batches function, I declared a string variable called oneTest and and int variable called amountOfBatches. Before checking how many batches were in the string, I made sure that it was a validQC test by calling isValidQC on the string. I then used a while for when the condition in the while loop true. The while loop would be called everytime the index i was less than the length of the test. Everytime the while loop found a ‘Q’, it would add one to the amountofBatches variable. It would then return the amountOfBatches variable. If the isValidQC test was false, I would return -1 and not go into the while loop.